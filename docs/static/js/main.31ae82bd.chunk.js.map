{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","URI","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qOAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAU5C,OAEI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,QAIhD,SACI,uBACIC,KAAK,OACLC,MAAOT,EACPU,SAdW,SAACP,GACpBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,UAAUF,QARhB,kBAYZL,GAZY,4CAAH,sDCWLQ,EATK,SAAC,GAAqB,EAApBL,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC7B,OACI,qBAAKI,UAAU,yCAAf,SACI,qBAAKC,IAAKL,EAAKM,IAAKP,OCsBjBQ,EArBC,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECHJ,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAatC,OARAC,qBAAU,WACNzB,EAAQC,GACHyB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBhB,KAAMmB,EACNL,SAAS,SAElB,CAACrB,IAEGsB,EDRwBK,CAAa3B,GAAhCc,EAFgB,EAErBP,KAAac,EAFQ,EAERA,QAEpB,OACI,qCACI,6BAAKrB,IACJqB,GAAW,wCACZ,qBAAKJ,UAAU,aAAf,SAEQH,EAAOL,KAAI,SAACC,GACR,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIC,aEMtBiB,EApBM,WAAO,IAAD,EACa1C,mBAAS,CAAC,YADvB,mBAChBQ,EADgB,KACJT,EADI,KAEvB,OACI,qCACI,qBAAKgC,UAAU,oCAAf,wBACA,cAAC,EAAD,CAAahC,cAAeA,IAC5B,uBACA,6BAEQS,EAAWe,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCTjC6B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.31ae82bd.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const handleOnChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 1)\r\n            setCategories(categories => [inputValue, ...categories]);\r\n    };\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleOnChange}\r\n            />\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};","export const getGifs = async (category) => {\r\n    const URI = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=lBxvWN34x8EVFO0g6fi2KRrFA2GMqGKs`;\r\n    const resp = await fetch(URI);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized.url\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n    // console.log(data);\r\n};","import React from \"react\";\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            {/*<p>{title}</p>*/}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React/*, {useState, useEffect} */ from \"react\";\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n// import GifGridItem from \"./GifGridItem\";\r\n\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Loading</p>}\r\n            <div className=\"card-grid \">\r\n                {\r\n                    images.map((img) => {\r\n                        return <GifGridItem\r\n                            key={img.id}\r\n                            {...img}/>;\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifGrid;\r\n","import {useState, useEffect} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => setState({\r\n                data: imgs,\r\n                loading: false\r\n            }));\r\n    }, [category]);\r\n\r\n    return state;\r\n};","import React, {useState} from \"react\";\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([\"Netflix\"]);\r\n    return (\r\n        <>\r\n            <div className=\"animate__animated animate__fadeIn\">Expert App</div>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"animate.css\";\n\nReactDOM.render(<GifExpertApp/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}